_realname=tiledb
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=2.9000
pkgrel=1
pkgdesc="Storage management library for sparse and dense array data (mingw-w64)"
arch=("any")
url="https://tiledb.com/"
license=("MIT")
depends=("${MINGW_PACKAGE_PREFIX}-lz4"
         "${MINGW_PACKAGE_PREFIX}-aws-sdk-cpp"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-zstd"
         "${MINGW_PACKAGE_PREFIX}-file"
         "${MINGW_PACKAGE_PREFIX}-dlfcn"
         )
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-curl"
             )
options=("staticlibs" "strip")
source_dir="$TILEDB_HOME"

build() {
  [[ -d ${source_dir}/build-${MINGW_CHOST} ]] && rm -rf ${source_dir}/build-${MINGW_CHOST}
  mkdir -p ${source_dir}/build-${MINGW_CHOST} && cd ${source_dir}/build-${MINGW_CHOST}

  if [ "$CARCH" == "i686" ]; then
  export CFLAGS="-mfpmath=sse -msse2"
  export CXXFLAGS="-mfpmath=sse -msse2"
  fi

  export MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX="
#    -DCMAKE_BUILD_TYPE=Release 

  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DTILEDB_STATIC=ON \
    -DTILEDB_S3=ON \
    -DCOMPILER_SUPPORTS_AVX2=OFF \
    -DTILEDB_SKIP_S3AWSSDK_DIR_LENGTH_CHECK=ON \
    -DTILEDB_WERROR=OFF \
    ..
  make
  make -C tiledb
  
  make examples
}

package() {
  cd ${source_dir}/build-${MINGW_CHOST}
  make DESTDIR="${pkgdir}" -C tiledb install
}

check (){
  cd ${source_dir}/build-${MINGW_CHOST}

  export TILEDB_VFS_S3_REQUEST_TIMEOUT_MS=10000 #6000
  export TILEDB_VFS_S3_AWS_ACCESS_KEY_ID=minio
  export TILEDB_VFS_S3_AWS_SECRET_ACCESS_KEY=miniosecretkey
  export TILEDB_VFS_S3_SCHEME=http

  # ... start-process in install-minio.ps1 script fails 
  # apparently due to pre-existing tmp/TMP/TEMP env vars
  ( unset tmp; unset TMP; unset TEMP; powershell ${TILEDB_HOME}/scripts/install-minio.ps1 )

  make -C tiledb/test tiledb_unit -j ${NUMBER_OF_PROCESSORS}
  # run all unit tests except
  # the config test that fails due to the config parameters set to non-default
  # values for s3/minio operability on windows.
  ./tiledb/test/tiledb_unit.exe -d=yes ~"C API: Test config iter"
  
  # add location of libtiledb.dll so examples can run
  export PATH=${PATH}:$(pwd)/tiledb/tiledb 
  

  echo 'running any examples/c_api/* found'

  BaseDir="$(pwd)"
  TestAppDir="$(pwd)/tiledb/examples/c_api"
  TestAppDataDir="$(pwd)/tiledb/examples/c_api/test_app_data"
  for exampleexe in $(ls ${TestAppDir}/*_c.exe) ; 
  do 
    cd ${TestAppDir}
    rm -rf ${TestAppDataDir}
    mkdir ${TestAppDataDir}
    cd ${TestAppDataDir}
    echo $exampleexe; $exampleexe; 
  done
  cd ${TestAppDir}
  rm -rf ${TestAppDataDir}

  echo 'running any examples/cpp_api/* found'
  cd ${BaseDir}
  TestAppDir="$(pwd)/tiledb/examples/cpp_api"
  TestAppDataDir="$(pwd)/tiledb/examples/cpp_api/test_app_data"
  for exampleexe in $(ls ${TestAppDir}/*_cpp.exe) ; 
  do 
    cd ${TestAppDir}
    rm -rf ${TestAppDataDir}
    mkdir ${TestAppDataDir}
    cd ${TestAppDataDir}
    echo $exampleexe; $exampleexe; 
  done
  cd ${TestAppDir}
  rm -rf ${TestAppDataDir}
  cd ${BaseDir}

  echo "done running examples"
  
}
