name: windows build

on:
  push:
    #~ paths:
      #~ - tiledb
      #~ - test
      #~ - .github
      #~ - tobedeletedafterseeifGAruns
  pull_request:

env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_S3: OFF
  TILEDB_AZURE: OFF
  TILEDB_GCS: OFF
  TILEDB_SERIALIZATION: OFF
  TILEDB_STATIC: OFF
  TILEDB_TOOLS: ON

jobs:
  build:
    #runs-on: windows-2016
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [windows-2016]
        os: [windows-2019]
    #if: ${{ false == true }}
    #hmm, is that indented commenting approach acceptable, don't recall noticing when using before...
    #~ strategy:
      #~ matrix:
        #~ include: [
          #~ { msystem: MINGW64, toolchain: x86_64 },
          #~ { msystem: MINGW32, toolchain: i686 },
          #~ { msystem: ucrt64, toolchain: "ucrt-x86_64" }
        #~ ]
      #~ fail-fast: false
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
      #~ MINGW_INSTALLS: ${{ matrix.msystem }}
      #~ MINGW_ARCH: ${{ matrix.msystem }}
      #~ MINGW_TOOLCHAIN: ${{ matrix.toolchain }}
      #~ PACMAN_REPOSITORY: ${{ matrix.msystem }}
    steps:
      - name: 'Print env'
        run: |
          set
        shell: cmd
      - name: Prepare git
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
        #~ with:
          #~ fetch-depth: 1
      - name: core tiledb windows build 
        run: |
          # seem to be missing output  (stderr?, or?), most cl.exe commands
          # should show with /verbosity:diagnostic, but are still missing afterwards...
          # https://github.com/actions/runner/issues/382
          # will this get stderr output in general? 
          $ErrorView = "NormalView" 
          
          Write-Host "AGENT_BUILDDIRECTORY is $env:AGENT_BUILDDIRECTORY"
          Write-Host "Number of processors is $env:NUMBER_OF_PROCESSORS"
          Write-Host "Running on image '$env:imageName'"
          Write-Host "Running on image '$($env:imageName)'"
          Write-Host "Running on image '$env:TILEDB_GA_IMAGE_NAME'"
          
          $cmdpath = (Get-Command cmd).Path
          Write-Host "cmd at " + $cmdpath

          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\cl.exe" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\cmake.exe" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\vcvarsall.bat" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\vcvarsx64.bat" /s'
          
          #$clpath = (Get-Command cl).Path
          #$cmakepath = (Get-Command cmake).Path
          #Write-Host "cl at " + $clpath
          #Write-Host "cmake at " + $cmakepath

          # Using names that were on azure, doc states they should have appended _PATH for GA
          # AP to GA, changing AGENT_BUILDDIRECTORY and BUILD_SOURCESDIRECTORY to GITHUB_WORKSPACE
          $env:AGENT_BUILDDIRECTORY = $env:GITHUB_WORKSPACE
          $env:BUILD_SOURCESDIRECTORY = $env:GITHUB_WORKSPACE

          mkdir $env:AGENT_BUILDDIRECTORY\build
          cd $env:AGENT_BUILDDIRECTORY\build

          #if ($env:imageName -eq "windows-2016") {
          if ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2016") {
            #if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          #} elseif ($env:imageName -eq "windows-2019") {
          } elseif ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2019") {
            #if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              #Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          } else {
            Write-Host "Unknown image name: '$($env:imageName)'"
            Write-Host "Unknown image name: '$($env:TILEDB_GA_IMAGE_NAME)'"
            #$host.SetShouldExit(1)
            exit $LastExitCode
          }
          
          # allow double-checking path
          cmd /c "echo $PATH"
          $cmakepath = (Get-Command cmake).Path # should be found after above added to path
          Write-Host "cmake at " + $cmakepath

          # TODO DEBUG move this back in the TILEDB_S3 section
          # currently we do not run S3 tests on Windows because tests time out (minio+azure slow?)
          #& "$env:BUILD_SOURCESDIRECTORY\scripts\install-minio.ps1"

          $bootstrapOptions = "-EnableVerbose -EnableStaticTileDB -EnableBuildDeps"
          if ($env:TILEDB_S3 -eq "ON") {
            $bootstrapOptions = "-EnableS3 " + $bootstrapOptions
          }
          if ($env:TILEDB_AZURE -eq "ON") {
            $bootstrapOptions = "-EnableAzure " + $bootstrapOptions
          }
          if ($env:TILEDB_GCS -eq "ON") {
            $bootstrapOptions = "-EnableGCS " + $bootstrapOptions
            #NOTE: GCS simulator not yet actually in place.
          }
          if ($env:TILEDB_SERIALIZATION -eq "ON") {
            $bootstrapOptions = "-EnableSerialization " + $bootstrapOptions
          }
          # static already added above as initial default
          # if ($env:TILEDB_STATIC -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableStaticTileDB"
          # }
          # if ($env:TILEDB_HDFS -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableHDFS"
          #}
          if ($env:TILEDB_TOOLS -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableTools"
          }
          if ($env:TILEDB_DEBUG -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableDebug"
          }
          # if ($env:TILEDB_CI_ASAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer address -EnableDebug"
          # }
          # if ($env:TILEDB_CI_TSAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer thread -EnableDebug"
          # }
          # static already added above as initial default
          # if ($env:TILEDB_FORCE_BUILD_DEPS" -eq "ON") {
          #   $bootstrapOptions = $bootstrapOptions + " -EnableBuildDeps"
          # }
          if ($env:TILEDB_WERROR -eq "OFF") {
            $bootstrapOptions = $bootstrapOptions + " -DisableWerror"
          }

          $bootstrapExpression = "& $env:BUILD_SOURCESDIRECTORY\bootstrap.ps1 " + $bootstrapOptions
          Write-Host "bootstrapExpression: $bootstrapExpression"
          Invoke-Expression $bootstrapExpression

          if ($LastExitCode -ne 0) {
            Write-Host "Bootstrap failed."
            #$host.SetShouldExit($LastExitCode)
            exit $LastExitCode
          }

          cd $env:AGENT_BUILDDIRECTORY\build
          & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild.exe" /m:2 /p:Configuration=Release /p:Platform=X64 /p:VisualStudioVersion=16.0 /p:CL_MPCount=1 /verbosity:diag ALL_BUILD.vcxproj
          #cmake --build $env:AGENT_BUILDDIRECTORY\build --config Release -j $env:NUMBER_OF_PROCESSORS -- /verbosity:diagnostic 2>&1 | c:\msys64\usr\bin\tee core.out.1a.txt
          #cmd /c "type core.out.1a.txt"

          if ($LastExitCode -ne 0) {
            Write-Host "Build failed. CMake exit status: " $LastExitCocde
            #$host.SetShouldExit($LastExitCode)
            exit $LastExitCode
          }

          cmake --build $env:AGENT_BUILDDIRECTORY\build  -j $env:NUMBER_OF_PROCESSORS --target install-tiledb --config Release 2>&1

          if ($LastExitCode -ne 0) {
            Write-Host "Installation failed."
            $host.SetShouldExit($LastExitCode)
          }
        shell: powershell
