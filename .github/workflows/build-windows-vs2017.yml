name: windows build

on:
  push:
    #~ paths:
      #~ - tiledb
      #~ - test
      #~ - .github
      #~ - tobedeletedafterseeifGAruns
  pull_request:

env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_S3: OFF
  TILEDB_AZURE: OFF
  TILEDB_GCS: OFF
  TILEDB_SERIALIZATION: OFF
  TILEDB_STATIC: OFF
  TILEDB_TOOLS: ON

jobs:
  build:
    #runs-on: windows-2016
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016]
        #considering https://stackoverflow.com/questions/65035256/how-to-access-matrix-variables-in-github-actions
        environ: [azure, s3, serialization]
        include:
          - environ: 'azure'
            TILEDB_AZURE: ON
            TILEDB_ARROW_TESTS: ON
            TILEDB_SERIALIZATION: OFF
            TILEDB_S3: OFF
          - environ: 's3'
            TILEDB_S3: ON
            TILEDB_ARROW_TESTS: ON
            TILEDB_SERIALIZATION: OFF
            TILEDB_AZURE: OFF
          - environ: 'serialization'
            TILEDB_S3: OFF
            TILEDB_AZURE: OFF
            TILEDB_ARROW_TESTS: OFF
            TILEDB_SERIALIZATION: ON
        #~ include:
          #~ envs:
            #~ S3:
              #~ env:
                #~ TILEDB_S3: ON
                #~ TILEDB_ARROW_TESTS: ON
                #~ TILEDB_SERIALIZATION: OFF
                #~ TILEDB_AZURE: OFF
            #~ azure:
              #~ env:
                #~ TILEDB_AZURE: ON
                #~ TILEDB_ARROW_TESTS: ON
                #~ TILEDB_SERIALIZATION: OFF
                #~ TILEDB_S3: OFF
            #~ serialization:
              #~ env:
                #~ TILEDB_S3: OFF
                #~ TILEDB_AZURE: OFF
                #~ TILEDB_ARROW_TESTS: OFF
                #~ TILEDB_SERIALIZATION: ON
        #os: [windows-2019]
    #if: ${{ false == true }}
    #hmm, is that indented commenting approach acceptable, don't recall noticing when using before...
    #~ strategy:
      #~ matrix:
        #~ include: [
          #~ { msystem: MINGW64, toolchain: x86_64 },
          #~ { msystem: MINGW32, toolchain: i686 },
          #~ { msystem: ucrt64, toolchain: "ucrt-x86_64" }
        #~ ]
      #~ fail-fast: false
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
      TILEDB_S3: ${{ matrix.TILEDB_S3 }}
      TILEDB_AZURE: ${{ matrix.TILEDB_AZURE }} #azure }}
      TILEDB_SERIALIZATION: ${{ matrix.TILEDB_SERIALIZATION }} #serialization }}
      TILEDB_ARROW_TESTS: ${{ matrix.TILEDB_ARROW_TESTS }}
      #~ MINGW_INSTALLS: ${{ matrix.msystem }}
      #~ MINGW_ARCH: ${{ matrix.msystem }}
      #~ MINGW_TOOLCHAIN: ${{ matrix.toolchain }}
      #~ PACMAN_REPOSITORY: ${{ matrix.msystem }}
    steps:
      - name: 'Print env'
        run: |
          set
        shell: cmd
      - name: ARROW python needs
        shell: bash
        #if: ${{ matrix.TILEDB_ARROW_TESTS == "ON" }}
        if: ${{ matrix.TILEDB_ARROW_TESTS == 'ON' }}
        run: |
          set -e pipefail
          if [[ "$TILEDB_ARROW_TESTS" == "ON" ]]; then
            pip install pyarrow pybind11 numpy
          fi
      - name: Prepare git
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
        #~ with:
          #~ fetch-depth: 1
      - name: core tiledb windows build 
        run: |
          # seem to be missing output  (stderr?, or?), most cl.exe commands
          # should show with /verbosity:diagnostic, but are still missing afterwards...
          # https://github.com/actions/runner/issues/382
          # will this get stderr output in general? 
          $ErrorView = "NormalView" 
          
          Write-Host "GITHUB_WORKSPACE is '$env:GITHUB_WORKSPACE'"
          Write-Host "AGENT_BUILDDIRECTORY is $env:AGENT_BUILDDIRECTORY"
          Write-Host "Number of processors is $env:NUMBER_OF_PROCESSORS"
          Write-Host "Running on image '$env:imageName'"
          Write-Host "Running on image '$($env:imageName)'"
          Write-Host "Running on image '$env:TILEDB_GA_IMAGE_NAME'"
          
          $cmdpath = (Get-Command cmd).Path
          Write-Host "cmd at " + $cmdpath

          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\cl.exe" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\cmake.exe" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\vcvarsall.bat" /s'
          #cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\vcvarsx64.bat" /s'
          cmd /c 'dir "c:\program files (x86)\Microsoft Visual Studio\2019\clang-cl.exe" /s'
          
          #$clpath = (Get-Command cl).Path
          #$cmakepath = (Get-Command cmake).Path
          #Write-Host "cl at " + $clpath
          #Write-Host "cmake at " + $cmakepath

          # Using names that were on azure, doc states they should have appended _PATH for GA
          # AP to GA, changing AGENT_BUILDDIRECTORY and BUILD_SOURCESDIRECTORY to GITHUB_WORKSPACE
          #$env:AGENT_BUILDDIRECTORY = $env:GITHUB_WORKSPACE
          $env:AGENT_BUILDDIRECTORY = $env:GITHUB_WORKSPACE.replace("TileDB\TileDB","tdbbd") # 't'ile'db' 'b'uild 'd'ir
          $env:BUILD_SOURCESDIRECTORY = $env:GITHUB_WORKSPACE

          Write-Host "GITHUB_WORKSPACE is '$env:GITHUB_WORKSPACE'"
          Write-Host "AGENT_BUILDDIRECTORY is '$env:AGENT_BUILDDIRECTORY'"
          Write-Host "BUILD_SOURCESDIRECTORY is '$env:BUILD_SOURCESDIRECTORY'"

          # TBD: because of 'too long' paths in azure/gcs, 
          # may need to modify 'build' directory location placing off 'root' rather than
          # underneath TileDB/TileDB where GA currently locates
          cmd /c "echo current dir @%cd% & dir"
          cmd /c "echo dir above @%cd% & dir .."
          #mkdir $env:AGENT_BUILDDIRECTORY\build
          mkdir $env:AGENT_BUILDDIRECTORY
          #cmd /c "mkdir $env:AGENT_BUILDDIRECTORY\build"
          cmd /c "echo @%cd% & dir"
          #cd $env:AGENT_BUILDDIRECTORY\build
          cd $env:AGENT_BUILDDIRECTORY
          cmd /c "echo @%cd% & dir"

          #if ($env:imageName -eq "windows-2016") {
          if ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2016") {
            #if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          #} elseif ($env:imageName -eq "windows-2019") {
          } elseif ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2019") {
            #if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              #Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          } else {
            Write-Host "Unknown image name: '$($env:imageName)'"
            Write-Host "Unknown image name: '$($env:TILEDB_GA_IMAGE_NAME)'"
            #$host.SetShouldExit(1)
            exit $LastExitCode
          }
          
          # allow double-checking path
          cmd /c "echo $PATH"
          $cmakepath = (Get-Command cmake).Path # should be found after above added to path
          Write-Host "cmake at " + $cmakepath

          # TODO DEBUG move this back in the TILEDB_S3 section
          # currently we do not run S3 tests on Windows because tests time out (minio+azure slow?)
          #& "$env:BUILD_SOURCESDIRECTORY\scripts\install-minio.ps1"

          $bootstrapOptions = "-EnableVerbose -EnableStaticTileDB -EnableBuildDeps"
          if ($env:TILEDB_S3 -eq "ON") {
            $bootstrapOptions = "-EnableS3 " + $bootstrapOptions
          }
          if ($env:TILEDB_AZURE -eq "ON") {
            $bootstrapOptions = "-EnableAzure " + $bootstrapOptions
          }
          if ($env:TILEDB_GCS -eq "ON") {
            $bootstrapOptions = "-EnableGCS " + $bootstrapOptions
            #NOTE: GCS simulator not yet actually in place.
          }
          if ($env:TILEDB_SERIALIZATION -eq "ON") {
            $bootstrapOptions = "-EnableSerialization " + $bootstrapOptions
          }
          # static already added above as initial default
          # if ($env:TILEDB_STATIC -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableStaticTileDB"
          # }
          # if ($env:TILEDB_HDFS -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableHDFS"
          #}
          if ($env:TILEDB_TOOLS -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableTools"
          }
          if ($env:TILEDB_DEBUG -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableDebug"
          }
          # if ($env:TILEDB_CI_ASAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer address -EnableDebug"
          # }
          # if ($env:TILEDB_CI_TSAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer thread -EnableDebug"
          # }
          # static already added above as initial default
          # if ($env:TILEDB_FORCE_BUILD_DEPS" -eq "ON") {
          #   $bootstrapOptions = $bootstrapOptions + " -EnableBuildDeps"
          # }
          if ($env:TILEDB_WERROR -eq "OFF") {
            $bootstrapOptions = $bootstrapOptions + " -DisableWerror"
          }
          
          #$bootstrapOptions = $bootstrapOptions + " -Prefix $env:GITHUB_WORKSPACE\TileDB\TileDB\"

          $bootstrapExpression = "& $env:BUILD_SOURCESDIRECTORY\bootstrap.ps1 " + $bootstrapOptions
          Write-Host "bootstrapExpression: $bootstrapExpression"
          Invoke-Expression $bootstrapExpression

          if ($LastExitCode -ne 0) {
            Write-Host "Bootstrap failed."
            #$host.SetShouldExit($LastExitCode)
            exit $LastExitCode
          }

          cmd /c "cd & dir"
          Write-Host "env:AGENT_BUILDDIRECTORY: '$env:AGENT_BUILDDIRECTORY'"

          #cmake --build $env:AGENT_BUILDDIRECTORY\build --config Release -j $env:NUMBER_OF_PROCESSORS
          cmake --build $env:AGENT_BUILDDIRECTORY --config Release -j $env:NUMBER_OF_PROCESSORS

          if ($LastExitCode -ne 0) {
            Write-Host "Build failed. CMake exit status: " $LastExitCocde
            #$host.SetShouldExit($LastExitCode)
            exit $LastExitCode
          }

          #cmake --build $env:AGENT_BUILDDIRECTORY\build  -j $env:NUMBER_OF_PROCESSORS --target install-tiledb --config Release 2>&1
          cmake --build $env:AGENT_BUILDDIRECTORY  -j $env:NUMBER_OF_PROCESSORS --target install-tiledb --config Release 2>&1

          if ($LastExitCode -ne 0) {
            Write-Host "Installation failed."
            $host.SetShouldExit($LastExitCode)
          }
        shell: powershell

      - name: 'Test'
        shell: powershell
        run: |
          $env:MINIO_ACCESS_KEY = "minio"
          $env:MINIO_SECRET_KEY = "miniosecretkey"
          $env:AWS_ACCESS_KEY_ID = "minio"
          $env:AWS_SECRET_ACCESS_KEY = "miniosecretkey"
          
          $env:AGENT_BUILDDIRECTORY = $env:GITHUB_WORKSPACE

          Write-Host "GITHUB_WORKSPACE is '$env:GITHUB_WORKSPACE'"
          Write-Host "AGENT_BUILDDIRECTORY is $env:AGENT_BUILDDIRECTORY"
          
          write-host "point A"

          # Clone backwards compatibility test arrays
          if ($env:BACKWARDS_COMPATIBILITY_ARRAYS -eq "ON") {
            git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.2.3 $env:BUILD_SOURCESDIRECTORY/test/inputs/arrays/read_compatibility_test
          }

          write-host "point B"
          
          if ($env:TILEDB_S3 -eq "ON") {
            # update CMake to disable S3 for the test configuration, see minio note above
            #cmake -B $env:AGENT_BUILDDIRECTORY\tiledb -DTILEDB_S3=0 $env:AGENT_BUILDDIRECTORY\tiledb
            cmake -B $env:AGENT_BUILDDIRECTORY\tiledb -DTILEDB_S3=0 $env:BUILD_SOURCESDIRECTORY
          }

          write-host "point C"
          
          # CMake exits with non-0 status if there are any warnings during the build, so
          # build the unit test executable before running tests.
          #cmake --build $env:AGENT_BUILDDIRECTORY\tiledb  -j $env:NUMBER_OF_PROCESSORS --target tiledb_unit --config Release -- /verbosity:minimal
          cmake --build $env:AGENT_BUILDDIRECTORY  -j $env:NUMBER_OF_PROCESSORS --target tiledb_unit --config Release -- /verbosity:minimal

          write-host "point D"
          
          if ($env:TILEDB_AZURE -eq "ON") {
            $useTileDBInstallNodeJS = $False #$True
            if($useTileDBInstallNodeJS) {
              write-host "point E"
              Write-Host "azurite: using custom install nodejs"
              #in CI environ, doesn't work with 'local' install, works when -g'lobal' install used in the .ps1
              & "$env:BUILD_SOURCESDIRECTORY\scripts\install-run-azurite.ps1"
            }
            else { #using the node/npm already present in vm
              write-host "point F"
              Write-Host "azurite: using vm install nodejs"
              write-host "temp: '$env:TEMP'"
               #this code path avoids overhead of download/expand/install of alternate nodejs/azurite.
              npm install -g azurite
              write-host "done with 'npm install -g azurite'"
              $azuriteDataPath = (Join-Path $env:TEMP "azuriteData")
              New-Item -ItemType Directory -Path $azuriteDataPath
              $azuriteDebugLog = (Join-Path $env:TEMP "azuriteDebugLog.Log")
              ls $env:TEMP
              ls $env:azureDataPath
              cmd /c "start `"azurite`" azurite-blob --silent --location $azuriteDataPath --debug $azuriteDebugLog --blobPort 10000 --blobHost 127.0.0.1"
              write-host "after starting azure"
            }
            write-host "look for 'node.exe' in following list:"
            tasklist | findstr /i node.exe
            write-host "point G"
          }

          write-host "point H"
          # Actually run tests
          # cmake --build $env:AGENT_BUILDDIRECTORY\tiledb --target check --config Release -- /verbosity:minimal
          cmake --build $env:BUILD_SOURCESDIRECTORY\tiledb --target check --config Release -- /verbosity:minimal
          write-host "point I"

          if ($LastExitCode -ne 0) {
             Write-Host "Tests failed. CMake exit status: " $LastExitCocde
             $host.SetShouldExit($LastExitCode)
          }
          write-host "point J"

          # Build the examples
          # cmake --build $env:AGENT_BUILDDIRECTORY --target examples --config Release -- /verbosity:minimal
          cmake --build $env:BUILD_SOURCESDIRECTORY --target examples --config Release -- /verbosity:minimal
          write-host "point K"

          if ($LastExitCode -ne 0) {
            Write-Host "Examples failed to build."
            $host.SetShouldExit($LastExitCode)
          }
          write-host "point L"

          # write-host "setting path with ';$env:AGENT_BUILDDIRECTORY\s\dist\bin;$env:AGENT_BUILDDIRECTORY\externals\install\bin'"
          # $env:Path += ";$env:AGENT_BUILDDIRECTORY\s\dist\bin;$env:AGENT_BUILDDIRECTORY\externals\install\bin"
          write-host "setting path with ';$env:BUILD_SOURCESDIRECTORY\dist\bin;$env:AGENT_BUILDDIRECTORY\externals\install\bin'"
          $env:Path += ";$env:BUILD_SOURCESDIRECTORY\dist\bin;$env:AGENT_BUILDDIRECTORY\externals\install\bin"

          write-host "point M"
          
          ls $env:AGENT_BUILDDIRECTORY\tiledb\examples\c_api\Release
          ls $env:BUILD_SOURCESDIRECTORY\tiledb\examples\c_api\Release
          ls $env:BUILD_SOURCESDIRECTORY\examples\c_api\Release
          
          write-host "point N"

          try {
            #$exepath = Join-Path $env:AGENT_BUILDDIRECTORY "build\tiledb\examples\c_api\Release\quickstart_dense_c.exe"
            $exepath = Join-Path $env:AGENT_BUILDDIRECTORY "tiledb\examples\c_api\Release\quickstart_dense_c.exe"
            & $exepath
          } catch {
            Write-Host "C API example failed. Error:"
            Write-Host $_
            $host.SetShouldExit(1)
          }
          write-host "point O"

          try {
            #$exepath = Join-Path $env:AGENT_BUILDDIRECTORY "build\tiledb\examples\cpp_api\Release\quickstart_dense_cpp.exe"
            $exepath = Join-Path $env:BUILD_SOURCESDIRECTORY "tiledb\examples\cpp_api\Release\quickstart_dense_cpp.exe"
            & $exepath
          } catch {
            Write-Host "C++ API example failed."
            $host.SetShouldExit(1)
          }
          write-host "point P"

          if ($LastExitCode -ne 0) {
            Write-Host "C++ API example failed."
            $host.SetShouldExit($LastExitCode)
          }
          write-host "point Q"

          # Build examples
          #cd $env:AGENT_BUILDDIRECTORY\s\examples\cmake_project
          cd $env:BUILD_SOURCESDIRECTORY\examples\cmake_project

          write-host "point R"

          mkdir build

          cd build

          write-host "point S"

          # Build zip artifact
          #cmake -A X64 -DCMAKE_PREFIX_PATH="$env:AGENT_BUILDDIRECTORY\s\dist" ..
          cmake -A X64 -DCMAKE_PREFIX_PATH="$env:BUILD_SOURCESDIRECTORY\dist" ..

          write-host "point T"

          cmake --build . --config Release -- /verbosity:minimal

          write-host "point U"

          .\Release\ExampleExe.exe

          write-host "point R"

          .\Release\ExampleExe_static.exe

          write-host "point S"
          
          #cd $env:AGENT_BUILDDIRECTORY

          #7z a tiledb-windows-x64.zip $env:AGENT_BUILDDIRECTORY\s\dist
