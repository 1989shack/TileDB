name: build-ubuntu-16.04-ASAN
on: push
env:
  CXX: g++-9

jobs:
  build:
    runs-on: ubuntu-16.04
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    name: Build - ubuntu-16.04 - ASAN
    steps:
      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: Check formatting (linux only)'
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/check_formatting_linux.sh
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Install doxygen (linux only)'
        run: |
          set -e pipefail
          # Install doxygen *before* running cmake
          sudo apt-get install doxygen
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Build and test libtiledb'
        id: test
        run: |

          BOOTSTRAP_ARGS="${BOOTSTRAP_ARGS} --enable-verbose";
          BOOTSTRAP_ARGS="${BOOTSTRAP_ARGS} --enable-sanitizer=address";
          BOOTSTRAP_ARGS="${BOOTSTRAP_ARGS} --enable-debug";
          BOOTSTRAP_ARGS="${BOOTSTRAP_ARGS} --enable-static-tiledb";
          BOOTSTRAP_ARGS="${BOOTSTRAP_ARGS} --enable-serialization";
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh

          ./tiledb/test/tiledb_unit -d yes | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

          pushd $GITHUB_WORKSPACE/examples/cmake_project
          mkdir build && cd build
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make
          ./ExampleExe
          popd
          # Build and run the PNG ingestion example.
          # libpng (example dependency)
          sudo apt-get install libpng-dev

          pushd $GITHUB_WORKSPACE/examples/png_ingestion;
          mkdir build && cd build;
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make;
          ./tiledb_png $GITHUB_WORKSPACE/doc/source/figures/Scarlet-Macaw-small.png /tmp/pngarray output.png;
          popd;

          source $GITHUB_WORKSPACE/scripts/ci/build_benchmarks.sh

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi
      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed

      - name: 'Build docs (no deployment)'
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/build_docs.sh
        if: ${{ runner.os == 'Linux' }}